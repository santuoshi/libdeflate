name: Build one

on:
  workflow_dispatch:
    inputs:
      branch:
        description: libdeflate branch
        required: false
        default: master

jobs:
  linux_x86_64-build:
    name: Build on (x86_64, ${{ matrix.os }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        compiler: [gcc, clang]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm libz-dev valgrind
    - run: sudo sysctl kernel.randomize_va_space=0 # https://bugs.launchpad.net/ubuntu/+source/llvm-toolchain-14/+bug/2048768
    - run: mkdir -p "build" & cmake -B build && cmake --build build
    - uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.os }}-${{ matrix.compiler }}-x86
        path: build/

  other-arch-build:
    name: Build and test (${{ matrix.arch }}, ${{ matrix.distro }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        include:
        - { arch: armv6, distro: bullseye, compiler: gcc }
        - { arch: armv6, distro: bullseye, compiler: clang }
        - { arch: armv7, distro: bullseye, compiler: gcc }
        - { arch: armv7, distro: bullseye, compiler: clang }
        - { arch: aarch64, distro: bullseye, compiler: gcc }
        - { arch: aarch64, distro: bullseye, compiler: clang }
        - { arch: s390x, distro: bullseye, compiler: gcc }
        - { arch: s390x, distro: bullseye, compiler: clang }
        - { arch: ppc64le, distro: bullseye, compiler: gcc }
        - { arch: ppc64le, distro: bullseye, compiler: clang }
        - { arch: riscv64, distro: ubuntu_latest, compiler: gcc }
        - { arch: riscv64, distro: ubuntu_latest, compiler: clang }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2.5.0
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y build-essential cmake clang llvm libz-dev
          run: mkdir -p "build" & cmake -B build && cmake --build build
      - uses: actions/upload-artifact@v4
        with:
         name: ${{matrix.arch}}-${{ matrix.distro }}-${{ matrix.compiler }}
         path: build/

  windows-msys2-build-and-test:
    name: Build and test (Windows, MSYS2, ${{matrix.sys}})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
        - { sys: mingw64, env: x86_64 }
        - { sys: mingw32, env: i686 }
    defaults:
      run:
        shell: msys2 {0}
    env:
      CFLAGS: -Werror
    steps:
    - uses: actions/checkout@v4
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >
          make
          mingw-w64-${{matrix.env}}-cc
          mingw-w64-${{matrix.env}}-cmake
          mingw-w64-${{matrix.env}}-ninja
          mingw-w64-${{matrix.env}}-zlib
    # Note: as per the CMake documentation, DESTDIR is unsupported on Windows.
    - run: cmake -B build -G Ninja -DCMAKE_INSTALL_PREFIX=build\install 
    - run: cmake --build build --verbose
    - run: cmake --install build --verbose
    - uses: actions/upload-artifact@v4
      with:
       name: windows-${{matrix.sys}}-${{ matrix.env }}
       path: build/
